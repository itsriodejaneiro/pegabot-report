plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
source("scripts/analise.R", encoding = "utf-8")
source("scripts/analise.R", encoding = "utf-8")
source("scripts/analise.R", encoding = "utf-8")
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
View(populares_retweets)
View(ft_temporal)
View(base_twint)
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
View(ft_temporal)
source("~/demotech/analises/rmarkdown/scripts/analise.R")
# Plot
plot_analise_temporal <- ggplot(ft_temporal, aes(x = fct_inorder(intervalo, intervalo_10min), y = freq)) +
geom_line(group = 1, color = paleta_its[2]) +
labs(title = "Evolução do compartilhamento dos tweets",
subtitle = paste0("que mencionam ", hashtag),
x = "",
y = "") +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE),
breaks = ft_temporal$intervalo[seq(1, 121, by = 20)]) +
theme_minimal() +
scale_y_continuous(breaks = seq(0, max(ft_temporal$freq) + 200, 200),
name = "Nº de tweets") +
theme(plot.title = element_text(size = 13),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 0, size = 11),
axis.text.y = element_text(size = 12),
plot.margin = unit(c(.5,2,.5,1),"cm"),
axis.title.y = element_text(size = 13, vjust = 2,
hjust = 0.98,
colour = paleta_its[7]),
#panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
#panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank())
ft_temporal$intervalo <- format(strptime(ft_temporal$intervalo_10min,
"%Y-%m-%d %H:%M:%S"),
format = "%m-%d %H:%M")
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
# Load packages
source('src/initialConfig.R')
setwd("~/demotech/analises/rmarkdown")
# Initial config -  Always execute
source('../initialConfig.R')
library(kableExtra)
library(scales)
library(knitr)
# 0. Leitura da base #####
hashtag <- '#7deSetembroVaiSerGigante'
# Leitura dos resultados do pegabot
base_pegabot <- read_csv("dados/resultado_#7deSetembroVaiSerGigante_02-09_04-09.csv",
col_types = cols(`Mensagem de Erro` = col_character(),
`Criação da conta` = col_character()))
base_pegabot$id <- seq(1:nrow(base_pegabot))
# Leitura da base twint
base_twint <- read_csv("dados/alltweets_#7deSetembroVaiSerGigante_02-09_04-09.csv",
col_types = cols(.default = "c"))
# Ajustes no username de base_twint
# to lower e com @
base_twint$username_original <- base_twint$username
base_twint$username <- paste0(tolower(base_twint$username))
base_pegabot <- base_pegabot %>% # Separando a base
mutate(Resultado = cut(x = `Análise Total`,
breaks = c(0,70, Inf),
labels = c("Baixa probabilidade de existência de comportamento automatizado",
"Probabilidade de existência de comportamento automatizado")))
bots <- base_pegabot %>%
filter(Resultado == "Probabilidade de existência de comportamento automatizado") %>%
distinct(`Perfil Twitter`)
# Filtrar tweets de bots
bots_twint <- base_twint[tolower(base_twint$username) %in% tolower(bots$`Perfil Twitter`),]
# Perfis com msg de erro
# Essa msg não existe na base do pegabot para execuções feitas localmente
msg_erro <- base_pegabot %>%
distinct(`Perfil Twitter`, `Mensagem de Erro`) %>%
group_by(`Mensagem de Erro`) %>%
summarise(Total = n()); msg_erro
DT::datatable(msg_erro, rownames = FALSE)
#
nerros <- msg_erro %>%
filter(!is.na(`Mensagem de Erro`)) %>%
select(Total) %>%
summarise(total = sum(Total))
# Números gerais
ntweets_analisados <- length(unique(base_twint$id)); ntweets_analisados
nperfis_analisados <- length(unique(base_pegabot$`Perfil Twitter`, incomparables = NA)); nperfis_analisados
nperfis_analisados_twint <- length(unique(base_twint$user_id)); nperfis_analisados_twint
percent_perfis_analisados_twint <- percent(nperfis_analisados/nperfis_analisados_twint, 0.1); percent_perfis_analisados_twint
percent_erros <- percent(nerros$total/nperfis_analisados, 0.1); percent_erros
primeiro_dia <- min(base_twint$date); primeiro_dia
ultimo_dia <- max(base_twint$date); ultimo_dia
nbots <- length(unique(bots$`Perfil Twitter`)); nbots
nbots_twint <- length(unique(bots_twint$username)); nbots_twint
percent_bots <- percent(nbots/nperfis_analisados, 0.1); percent_bots
percent_bots_twint <- percent(nbots_twint/nperfis_analisados_twint, 0.1); percent_bots_twint
nposts_bots <- nrow(bots_twint); nposts_bots
percent_posts_bots <- percent(nposts_bots/ntweets_analisados, 0.1); percent_posts_bots
total_horas <- round(as.numeric(difftime(ultimo_dia, primeiro_dia, units = "h")),); total_horas
# Adicionar intervalo de 10 min
base_twint$intervalo_10min <- cut(as.POSIXct(base_twint$date), breaks = "10 min",)
# Adicionar intervalo de 5 min
base_twint$intervalo_5min <- cut(as.POSIXct(base_twint$date), breaks = "5 min")
# Tabela de frequência por intervalo
ft_temporal <- plyr::count(base_twint, 'intervalo_10min')
ft_temporal$intervalo <- format(strptime(ft_temporal$intervalo_10min,
"%Y-%m-%d %H:%M:%S"),
format = "%d/%m\n%H:%M")
# Plot
plot_analise_temporal <- ggplot(ft_temporal, aes(x = fct_inorder(intervalo, intervalo_10min), y = freq)) +
geom_line(group = 1, color = paleta_its[2]) +
labs(title = "Evolução do compartilhamento dos tweets",
subtitle = paste0("que mencionam ", hashtag),
x = "",
y = "") +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE),
breaks = ft_temporal$intervalo[seq(1, 451, by = 50)]) +
theme_minimal() +
scale_y_continuous(breaks = seq(0, max(ft_temporal$freq) + 200, 100),
name = "Nº de tweets") +
theme(plot.title = element_text(size = 13),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 0, size = 11),
axis.text.y = element_text(size = 12),
plot.margin = unit(c(.5,2,.5,1),"cm"),
axis.title.y = element_text(size = 13, vjust = 2,
hjust = 0.98,
colour = paleta_its[7]),
#panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
#panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank())
View(ft_temporal)
# Initial config -  Always execute
source('../initialConfig.R')
library(kableExtra)
library(scales)
library(knitr)
# 0. Leitura da base #####
hashtag <- '#7deSetembroVaiSerGigante'
# Leitura dos resultados do pegabot
base_pegabot <- read_csv("dados/resultado_#7deSetembroVaiSerGigante_02-09_04-09.csv",
col_types = cols(`Mensagem de Erro` = col_character(),
`Criação da conta` = col_character()))
base_pegabot$id <- seq(1:nrow(base_pegabot))
# Leitura da base twint
base_twint <- read_csv("dados/alltweets_#7deSetembroVaiSerGigante_02-09_04-09.csv",
col_types = cols(.default = "c"))
# Ajustes no username de base_twint
# to lower e com @
base_twint$username_original <- base_twint$username
base_twint$username <- paste0(tolower(base_twint$username))
base_pegabot <- base_pegabot %>% # Separando a base
mutate(Resultado = cut(x = `Análise Total`,
breaks = c(0,70, Inf),
labels = c("Baixa probabilidade de existência de comportamento automatizado",
"Probabilidade de existência de comportamento automatizado")))
bots <- base_pegabot %>%
filter(Resultado == "Probabilidade de existência de comportamento automatizado") %>%
distinct(`Perfil Twitter`)
# Filtrar tweets de bots
bots_twint <- base_twint[tolower(base_twint$username) %in% tolower(bots$`Perfil Twitter`),]
# Perfis com msg de erro
# Essa msg não existe na base do pegabot para execuções feitas localmente
msg_erro <- base_pegabot %>%
distinct(`Perfil Twitter`, `Mensagem de Erro`) %>%
group_by(`Mensagem de Erro`) %>%
summarise(Total = n()); msg_erro
DT::datatable(msg_erro, rownames = FALSE)
#
nerros <- msg_erro %>%
filter(!is.na(`Mensagem de Erro`)) %>%
select(Total) %>%
summarise(total = sum(Total))
# Números gerais
ntweets_analisados <- length(unique(base_twint$id)); ntweets_analisados
nperfis_analisados <- length(unique(base_pegabot$`Perfil Twitter`, incomparables = NA)); nperfis_analisados
nperfis_analisados_twint <- length(unique(base_twint$user_id)); nperfis_analisados_twint
percent_perfis_analisados_twint <- percent(nperfis_analisados/nperfis_analisados_twint, 0.1); percent_perfis_analisados_twint
percent_erros <- percent(nerros$total/nperfis_analisados, 0.1); percent_erros
primeiro_dia <- min(base_twint$date); primeiro_dia
ultimo_dia <- max(base_twint$date); ultimo_dia
nbots <- length(unique(bots$`Perfil Twitter`)); nbots
nbots_twint <- length(unique(bots_twint$username)); nbots_twint
percent_bots <- percent(nbots/nperfis_analisados, 0.1); percent_bots
percent_bots_twint <- percent(nbots_twint/nperfis_analisados_twint, 0.1); percent_bots_twint
nposts_bots <- nrow(bots_twint); nposts_bots
percent_posts_bots <- percent(nposts_bots/ntweets_analisados, 0.1); percent_posts_bots
total_horas <- round(as.numeric(difftime(ultimo_dia, primeiro_dia, units = "h")),); total_horas
# Adicionar intervalo de 10 min
base_twint$intervalo_10min <- cut(as.POSIXct(base_twint$date), breaks = "10 min",)
# Adicionar intervalo de 5 min
base_twint$intervalo_5min <- cut(as.POSIXct(base_twint$date), breaks = "5 min")
# Tabela de frequência por intervalo
ft_temporal <- plyr::count(base_twint, 'intervalo_10min')
View(ft_temporal)
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
# Plot
plot_analise_temporal <- ggplot(ft_temporal, aes(x = fct_inorder(intervalo, intervalo_10min), y = freq)) +
geom_line(group = 1, color = paleta_its[2]) +
labs(title = "Evolução do compartilhamento dos tweets",
subtitle = paste0("que mencionam ", hashtag),
x = "",
y = "") +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE),
breaks = ft_temporal$intervalo[seq(1, 451, by = 50)]) +
theme_minimal() +
scale_y_continuous(breaks = seq(0, max(ft_temporal$freq) + 200, 100),
name = "Nº de tweets") +
theme(plot.title = element_text(size = 13),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 0, size = 11),
axis.text.y = element_text(size = 12),
plot.margin = unit(c(.5,2,.5,1),"cm"),
axis.title.y = element_text(size = 13, vjust = 2,
hjust = 0.98,
colour = paleta_its[7]),
#panel.grid.major.x = element_blank(),
#panel.grid.minor.x = element_blank(),
#panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank())
View(plot_analise_temporal)
View(plot_analise_temporal)
source("~/demotech/analises/rmarkdown/scripts/analise.R", echo=TRUE)
View(total_tweets_altafreq)
View(max_compartilhamento)
View(populares_retweets)
source("scripts/analise.R", encoding = "utf-8")
source("scripts/analise.R", encoding = "utf-8")
# Initial config -  Always execute
source('../initialConfig.R')
library(kableExtra)
library(scales)
library(knitr)
# 0. Leitura da base #####
hashtag <- '#LulaCovarde'
# Leitura dos resultados do pegabot
base_pegabot <- read_csv("dados/resultado_#LulaCovarde.csv",
col_types = cols(`Mensagem de Erro` = col_character(),
`Criação da conta` = col_character()))
base_pegabot$id <- seq(1:nrow(base_pegabot))
# Leitura da base twint
base_twint <- read_csv("dados/alltweets_#LulaCovarde.csv",
col_types = cols(.default = "c"))
# Ajustes no username de base_twint
# to lower e com @
base_twint$username_original <- base_twint$username
base_twint$username <- paste0(tolower(base_twint$username))
base_pegabot <- base_pegabot %>% # Separando a base
mutate(Resultado = cut(x = `Análise Total`,
breaks = c(0,70, Inf),
labels = c("Baixa probabilidade de existência de comportamento automatizado",
"Probabilidade de existência de comportamento automatizado")))
source("scripts/analise.R", encoding = "utf-8")
base_pegabot <- base_pegabot %>% # Separando a base
mutate(Resultado = cut(x = `Análise Total`,
breaks = c(0,70, Inf),
labels = c("Baixa probabilidade de existência de comportamento automatizado",
"Probabilidade de existência de comportamento automatizado")))
bots <- base_pegabot %>%
filter(Resultado == "Probabilidade de existência de comportamento automatizado") %>%
distinct(`Perfil Twitter`)
base_pegabot <- base_pegabot %>% # Separando a base
mutate(Resultado = cut(x = `Análise Total`,
breaks = c(0,70, Inf),
labels = c("Baixa probabilidade de existência de comportamento automatizado",
"Probabilidade de existência de comportamento automatizado")))
base_pegabot <- base_pegabot %>% # Separando a base
mutate(Resultado = cut(x = `Análise Total`,
breaks = c(0,70, Inf),
labels = c("Baixa probabilidade de existência de comportamento automatizado",
"Probabilidade de existência de comportamento automatizado")))
base_pegabot <- base_pegabot %>% # Separando a base
mutate(Resultado = cut(x = `Análise Total`,
breaks = c(0,70, Inf),
labels = c("Baixa probabilidade de existência de comportamento automatizado",
"Probabilidade de existência de comportamento automatizado")))
# Initial config -  Always execute
source('../initialConfig.R')
library(kableExtra)
library(scales)
library(knitr)
# 0. Leitura da base #####
hashtag <- '#LulaCovarde'
# Leitura dos resultados do pegabot
base_pegabot <- read_csv("dados/resultado_#LulaCovarde.csv",
col_types = cols(`Mensagem de Erro` = col_character(),
`Criação da conta` = col_character()))
base_pegabot$id <- seq(1:nrow(base_pegabot))
# Leitura da base twint
base_twint <- read_csv("dados/alltweets_#LulaCovarde.csv",
col_types = cols(.default = "c"))
# Ajustes no username de base_twint
# to lower e com @
base_twint$username_original <- base_twint$username
base_twint$username <- paste0(tolower(base_twint$username))
base_pegabot <- base_pegabot %>% # Separando a base
mutate(Resultado = cut(x = `Análise Total`,
breaks = c(0,70, Inf),
labels = c("Baixa probabilidade de existência de comportamento automatizado",
"Probabilidade de existência de comportamento automatizado")))
bots <- base_pegabot %>%
filter(Resultado == "Probabilidade de existência de comportamento automatizado") %>%
distinct(`Perfil Twitter`)
# Filtrar tweets de bots
bots_twint <- base_twint[tolower(base_twint$username) %in% tolower(bots$`Perfil Twitter`),]
# Perfis com msg de erro
# Essa msg não existe na base do pegabot para execuções feitas localmente
msg_erro <- base_pegabot %>%
distinct(`Perfil Twitter`, `Mensagem de Erro`) %>%
group_by(`Mensagem de Erro`) %>%
summarise(Total = n()); msg_erro
DT::datatable(msg_erro, rownames = FALSE)
#
nerros <- msg_erro %>%
filter(!is.na(`Mensagem de Erro`)) %>%
select(Total) %>%
summarise(total = sum(Total))
# Números gerais
ntweets_analisados <- length(unique(base_twint$id)); ntweets_analisados
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
plot_analise_temporal
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
View(ft_temporal)
source("scripts/analise.R", encoding = "utf-8")
plot_analise_temporal
plot_altafreq
kbl(populares_retweets[,c(3,4,2)], row.names = FALSE, col.names = c('Autor', 'Link', 'Total RTs')) %>% kable_minimal()
plot_nuvem
View(populares_retweets)
