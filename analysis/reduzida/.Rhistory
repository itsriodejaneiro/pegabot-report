usuarios_alta_freq <- scales::percent(nusuarios_alta_freq/nperfis_total, accuracy = 0.1); usuarios_alta_freq
# Quantidade total de tweets postados por usuários com alta frequência -- sum(total_tweets_freq80$n)
# em relação à quantidade total de tweets coletados -- ntweets_analisados
# Isso vai dar uma ideia do volume de tweets que poucos usuarios publicam em relação ao total de tweets.
ntotal_tweets_altafreq <- sum(total_tweets_altafreq$n); ntotal_tweets_altafreq
alta_atividade <- scales::percent(ntotal_tweets_altafreq/ntweets_analisados, accuracy = 0.1); alta_atividade
users_per_ntweets$type <- ifelse(round(users_per_ntweets$total_tweets) >= sd_tweets,
'alta', 'normal')
# Plot todos os usuários
plot_dist <- ggplot(users_per_ntweets, aes(x = total_tweets, y = n, colour = type)) +
geom_point(alpha = .7, size = 4) +
#geom_bar(stat = "identity", fill = paleta_its[1]) +
labs(title = "Distribuição da quantidade de tweets por número de usuários",
subtitle = expression(
paste("considerando ", bold("todos os usuários"))),
y = "Nº de usuários (log)",
x = "Nº de tweets") + scale_y_log10() +
theme_minimal() +
scale_color_manual(values = paleta_its[c(11,6)]) +
theme(text = element_text(family = "sans"),
legend.position = "none",
plot.title = element_text(size = 20,
colour = paleta_its[8]),
plot.subtitle = element_text(size = 18,
colour = paleta_its[8]),
axis.text.x = element_text(size = 18,
colour = paleta_its[7]),
axis.title.x = element_text(size = 18,
colour = paleta_its[7],
vjust = -1,
hjust = 0),
axis.text.y = element_text(size = 18,
colour = paleta_its[7]),
axis.title.y = element_text(size = 18,
colour = paleta_its[7],
vjust = 2,
hjust = 0.98),
plot.margin = unit(c(.5,2,.5,1),"cm"),
panel.grid.minor.y = element_blank()); plot_dist #+
ggsave('output/plot3_dist.png', width = 16, height = 8, units = 'in', dpi = 100)
# O que é tweet e retweet desses usuários com alta frequência
# Filtrar a base para pegar apenas regsitros desses usuários
subset_alta_freq <- full_data[full_data$username %in% total_tweets_altafreq$username,]
retweets_altafreq <- nrow(subset_alta_freq[subset_alta_freq$retweet == 'True',])
tweets_altafreq <- nrow(subset_alta_freq[subset_alta_freq$retweet == 'False',])
# Porcentagem em relação ao total de registros de subset_alta_freq
percent_rts_alta <- scales::percent(retweets_altafreq/nrow(subset_alta_freq)); percent_rts_alta
percent_tweets_alta <- scales::percent(tweets_altafreq/nrow(subset_alta_freq)); percent_tweets_alta
# Porcentagem em relação ao total de registros da full_data
percent_rts_alta <- scales::percent(retweets_altafreq/ntweets_analisados); percent_rts_alta
percent_tweets_alta <- scales::percent(tweets_altafreq/ntweets_analisados); percent_tweets_alta
# Dentre os perfis com mais de 70%+ quais estão na listagem
# de alta frequência de posts
usuarios_altafreq_bots <- bots[bots$username %in% total_tweets_altafreq$username,]
nrow(usuarios_altafreq_bots)
(nrow(usuarios_altafreq_bots)/nrow(total_tweets_altafreq))*100
full_data$account_created <- as.Date(full_data$`Criação da conta`)
full_data$interval_created_account <- format(full_data$`Criação da conta`,
format = "%d/%m/%Y")
created_account_peryear <- full_data %>%
select(user_id, username, interval_created_account, Resultado) %>%
distinct() %>%
mutate(year = format(as.Date(interval_created_account, format="%d/%m/%Y"),"%Y")) %>%
group_by(year, Resultado) %>%
count() %>%
arrange(year) %>%
filter(year != '1970') %>% filter(year != '2006')
plot_creation <- ggplot(created_account_peryear, aes(x = year, y = n)) +
geom_line(aes(color = Resultado, group = Resultado), size = 1.5) +
geom_point(aes(color = Resultado, group = Resultado)) +
scale_color_manual(values = paleta_its[c(9,2)]) +
labs(title = "Evolução da criação de contas por ano",
x = "",
y = "") +
theme_minimal() +
scale_y_continuous(breaks = seq(0, max(created_account_peryear$n) + 1000, 300),
name = "Nº de novas contas") +
theme(text = element_text(family = "sans"),
legend.title = element_blank(),
legend.text = element_text(size = 16),
legend.position = 'top',
legend.justification = c(0,0),
legend.direction = 'horizontal',
plot.title = element_text(size = 20,
colour = paleta_its[8],
hjust = -0.08),
plot.subtitle = element_text(size = 18),
axis.text.x = element_text(size = 18,
colour = paleta_its[7]),
axis.text.y = element_text(size = 18,
colour = paleta_its[7]),
axis.title.y = element_text(size = 18,
colour = paleta_its[7],
vjust = 2,
hjust = 0.98),
plot.margin = unit(c(.5,2,.5,1),"cm"),
panel.grid.minor.y = element_blank()); plot_creation
ggsave('output/plot2_created_acc.png', width = 12, height = 6, units = 'in', dpi = 100)
plot_creation <- ggplot(created_account_peryear, aes(x = year, y = n)) +
geom_line(aes(color = Resultado, group = Resultado), size = 1.5) +
geom_point(aes(color = Resultado, group = Resultado)) +
scale_color_manual(values = paleta_its[c(9,2)]) +
labs(title = "Evolução da criação de contas por ano",
x = "",
y = "") +
theme_minimal() +
scale_y_continuous(breaks = seq(0, max(created_account_peryear$n) + 1000, 300),
name = "Nº de novas contas") +
theme(text = element_text(family = "sans"),
legend.title = element_blank(),
legend.text = element_text(size = 16),
legend.position = 'top',
legend.justification = c(0,0),
legend.direction = 'horizontal',
plot.title = element_text(size = 20,
colour = paleta_its[8],
hjust = -0.08),
plot.subtitle = element_text(size = 18),
axis.text.x = element_text(size = 18,
colour = paleta_its[7]),
axis.text.y = element_text(size = 18,
colour = paleta_its[7]),
axis.title.y = element_text(size = 18,
colour = paleta_its[7],
vjust = 2,
hjust = 0.98),
plot.margin = unit(c(.5,2,.5,1),"cm"),
panel.grid.minor.y = element_blank()); plot_creation
poprts_bots <- bots_twint %>%
filter(retweet == 'True') %>%
group_by(tweet, retweet_id) %>%
summarise(n = n())  %>%
arrange(desc(n)) %>%
head(5)
poprts_bots <- bots_twint %>%
filter(retweet == 'True') %>%
group_by(tweet, retweet_id) %>%
summarise(n = n())  %>%
arrange(desc(n)) %>%
head(5)
View(poprts_bots)
poprts_bots_font <- full_data %>%
filter(id %in% poprts_bots$retweet_id) %>%
select(username, tweet, link, id) %>%
left_join(y = poprts_bots, by = c('id' = 'retweet_id')) %>%
arrange(desc(n))
# 7.1 Listagem de hashtags recentes
base_twint <- base_twint %>% ungroup
View(base_twint)
user_data <- full_data %>% select(user_id, Resultado, `Hashtags Recentes`) %>% distinct()
hashtags <- unnest_tokens(base_twint, h, 'hashtags') %>%
count(h, sort = T)
hashtags_filtered <- hashtags[4:60,]
hashtags_filtered <- hashtags_filtered[-3,]
plot_tags <- ggplot(hashtags[3:50,], aes(label = h, size = n,  color = n)) +
geom_text_wordcloud_area(rm_outside = TRUE, shape = 'circle') +
scale_size_area(max_size = 12) +
theme_minimal() +
scale_color_gradient(low = paleta_its[3], high = paleta_its[1]); plot_tags
ggsave('output/plot_tags.png', width = 16, height = 10, units = 'in', dpi = 100)
clean_text <- full_data %>%
filter(retweet == 'False') %>%
mutate(tweet_clean = tweet_lower) %>%
select(tweet_clean, interval_1day) %>%
mutate_at(vars(tweet_clean), textprocessing) # essa função textprocessing está no arquivo initialSetup.R
all_words_period <- unnest_tokens(clean_text, w, 'tweet_clean') %>%
group_by(interval_1day, w) %>%
count(w, sort = T) %>%
filter(!w %in% c(stopwords('pt'),
'q', 'é', 'tá', 'ser', 'vai',
'pra', 'para', 'que', 'ou', 'sobre'))
# Ajustar para outros intervalos se necessário
days <- unique(all_words_period$interval_1day)
library(wordcloud2)
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
webshot::webshot(paste0("output/wc",i,".html"),paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
}
all_words_period <- unnest_tokens(clean_text, w, 'tweet_clean') %>%
group_by(interval_1day, w) %>%
count(w, sort = T) %>%
filter(!w %in% c(stopwords('pt'),
'q', 'é', 'tá', 'ser', 'vai',
'pra', 'para', 'que', 'ou', 'sobre', 'vou'))
# Ajustar para outros intervalos se necessário
days <- unique(all_words_period$interval_1day)
library(wordcloud2)
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
webshot::webshot(paste0("output/wc",i,".html"),paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
webshot::webshot(paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
}
View(all_words_period)
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",days[i],".html"),selfcontained = F)
}
install.packages("webshot")
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc-",days[i],".html"),selfcontained = F)
webshot::webshot(paste0("output/wc-",days[i],".html"),paste0("output/wc-",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
library(wordcloud2)
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
webshot::webshot(paste0("output/wc",i,".html"),paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
webshot::webshot(paste0("output/wc",i,".html"),paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
webshot::webshot(paste0("output/wc",i,".html"),paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
library(dplyr)
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
webshot::webshot(paste0("output/wc",i,".html"),paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
library(wordcloud2)
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
webshot::webshot(paste0("output/wc",i,".html"),paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
library("htmltools")
library("webshot")
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
webshot::webshot(paste0("output/wc",i,".html"),paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
library(corpus)
library(DBI)
library(RPostgreSQL)
library(emojifont)
library(gghighlight)
library(readr)
library(tidyverse)
library(readxl)
library(scales)
library(DT)
library(waffle)
library(dplyr)
library(tidytext)
library(stringr)
library(reshape2)
library(ggwordcloud)
library(ggpmisc)
library(xlsx)
library(data.table)
library(rtweet)
library(formattable)
library(kableExtra)
library(igraph)
library(tm)
library(ggraph)
library("htmltools")
library("webshot")
library(extrafont)
loadfonts()
library(showtext)
library(ggtext)
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc",i,".html"),selfcontained = F)
webshot::webshot(paste0("output/wc",i,".html"),paste0("output/wc",i,".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)
# webshot::webshot(paste0("output/wc_",days[i],".html"),paste0("output/wc_",days[i],".png"),
# vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)
webshot::webshot("output/wc_",days[i],".html",paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'square')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)
webshot::webshot(paste0("output/wc_",days[i],".html"),paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
traceback()
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)
webshot::webshot(paste0("file:///output/wc_",days[i],".html"),paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)  %>%
webshot::webshot(file = paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)  %>%
webshot::webshot(paste0("file://output/wc_",days[i],".html"),paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)  %>%
webshot::webshot(paste0("file:///output/wc_",days[i],".html"),paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)  %>%
webshot::webshot(paste0("output/wc_",days[i],".html"),paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)
webshot::webshot(paste0("file:///output/wc_",days[i],".html"),paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)
webshot::webshot(paste0("file://output/wc_",days[i],".html"),paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
traceback()
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its,
shape = 'circle')
saveWidget(wc, paste0("output/wc_",days[i],".html"),selfcontained = F)
webshot(paste0("file://output/wc_",days[i],".html"),paste0("output/wc_",days[i],".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
for (i in 1:length(days)){
top_words_day <- all_words_period %>%
filter(interval_1day == days[i]) %>%
arrange(desc(n)) %>%
head(200)
wc <- wordcloud2(top_words_day[-1], color = paleta_its, shape = 'circle')
saveWidget(wc, paste0("output/wc_", days[i], ".html"), selfcontained = F)
webshot(
paste0("output/wc_", days[i], ".html"),
paste0("output/wc_", days[i], ".png"),
vwidth = 1300, vheight = 1200, delay = 10)
}
